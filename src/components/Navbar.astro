---
import { getDocPaths } from "../utils/get_paths";

const posts = await getDocPaths();

// https://stackoverflow.com/questions/14446511/most-efficient-method-to-groupby-on-an-array-of-objects
const groupBy = <T,>(
  array: T[],
  predicate: (value: T, index: number, array: T[]) => string
) =>
  array.reduce(
    (acc, value, index, array) => {
      (acc[predicate(value, index, array)] ||= []).push(value);
      return acc;
    },
    {} as { [key: string]: T[] }
  );

const getParent = (p: { params?: { slug: string }; props: any }) =>
  p.props.entry.data.parent;

const grouped = groupBy(
  posts.filter((p) => getParent(p) !== undefined),
  (post) => getParent(post)!
);
---

<div class="py-6 pr-6 max-h-[calc(100vh-4rem)] overflow-scroll">
  {
    posts
      .filter((post) => getParent(post) === undefined)
      .map((parentEntry) => (
        <div class="pb-4">
          <a
            href={["/docs", parentEntry.params.slug].join("/")}
            class="text-sm font-semibold hover:underline"
          >
            {parentEntry.props.entry.data.title}
          </a>
          <div class="grid grid-flow-row auto-rows-max text-sm mt-1">
            {grouped[parentEntry.props.entry.data.title]?.map((post) => (
              <a
                class="text-muted-foreground hover:underline py-1"
                href={[
                  "/docs",
                  getParent(post)!.toLowerCase(),
                  post.params.slug,
                ].join("/")}
              >
                {post.props.entry.data.title}
              </a>
            ))}
          </div>
        </div>
      ))
  }
</div>
