---
import {
  posts,
  getParent,
  groupedNavbarParents,
  navbarParents,
} from "./navigationConfig";
---

<div
  class="py-6 pr-6 h-full hover:overflow-y-auto overflow-x-hidden overflow-y-hidden scrollbar-stable"
>
  {
    navbarParents
      .map((i) => {
        return {
          navbarItem: i,
          parentEntry: posts.find(
            (p) => p.params.slug === i.title.toLowerCase()
          )!,
        };
      })
      .map(({ navbarItem, parentEntry }) => (
        <div class="pb-4">
          <a
            href={["/docs", parentEntry.params.slug].join("/")}
            class="text-sm font-semibold hover:underline"
          >
            {parentEntry.props.entry.data.title}
          </a>
          <div class="grid grid-flow-row auto-rows-max text-sm mt-1 w-5/6">
            {navbarItem.subcategories !== undefined &&
              navbarItem.subcategories.length > 0 && (
                <>
                  {navbarItem.subcategories.map((c) => (
                    <div>
                      <div
                        class="collapsibleNav group flex flex-row items-center gap-1 peer text-muted-foreground hover:underline cursor-pointer py-1"
                        data-state="closed"
                      >
                        {c}
                        <svg
                          class=" group-data-[state=closed]:block hidden"
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z"
                            fill="currentColor"
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                          />
                        </svg>
                        <svg
                          class=" group-data-[state=open]:block hidden"
                          width="15"
                          height="15"
                          viewBox="0 0 15 15"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z"
                            fill="currentColor"
                            fill-rule="evenodd"
                            clip-rule="evenodd"
                          />
                        </svg>
                      </div>
                      <div class="peer-data-[state=open]:grid hidden text-muted-foreground py-1 ml-4">
                        {groupedNavbarParents[c]?.map((post) => (
                          <a
                            class="hover:underline py-1"
                            href={[
                              "/docs",
                              c.toLowerCase(),
                              post.params.slug,
                            ].join("/")}
                          >
                            {post.props.entry.data.title}
                          </a>
                        ))}
                      </div>
                    </div>
                  ))}
                </>
              )}
            {groupedNavbarParents[parentEntry.props.entry.data.title]?.map(
              (post) => (
                <a
                  class="text-muted-foreground hover:underline py-1"
                  href={[
                    "/docs",
                    getParent(post)!.toLowerCase(),
                    post.params.slug,
                  ].join("/")}
                >
                  {post.props.entry.data.title}
                </a>
              )
            )}
          </div>
        </div>
      ))
  }
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    const collapsibleButtons = document.querySelectorAll(".collapsibleNav");
    for (const button of collapsibleButtons) {
      const key = `expanded:${button.textContent}`;
      const lastState = localStorage.getItem(key);
      if (lastState === "open") {
        button.setAttribute("data-state", "open");
      }
      button.addEventListener("click", () => {
        const newState =
          button.getAttribute("data-state") === "closed" ? "open" : "closed";
        button.setAttribute("data-state", newState);
        localStorage.setItem(key, newState);
      });
    }
  });
</script>
